"""
Telegram Reminder Bot - –ë–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
–ê–≤—Ç–æ—Ä: Wlad

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
pip install python-telegram-bot apscheduler pytz

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
2. –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python telegram-reminder-bot.py
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ 
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

class ReminderBot:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.reminders: Dict[str, Dict] = {}
        self.user_timezones: Dict[int, str] = {}
        self.data_file = "reminders.json"
        self.load_data()
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.reminders = data.get('reminders', {})
                    self.user_timezones = {int(k): v for k, v in data.get('user_timezones', {}).items()}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'reminders': self.reminders,
                'user_timezones': {str(k): v for k, v in self.user_timezones.items()}
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = ReminderBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = """
ü§ñ **–ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞!

**–ö–æ–º–∞–Ω–¥—ã:**
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/delete - –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/timezone - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**
`–î–∞—Ç–∞: 2025-08-29`
`–í—Ä–µ–º—è: 14:30`
`–¢–µ–∫—Å—Ç: –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º`

–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ 1 —á–∞—Å –∏ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è! ‚è∞
    """
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await start(update, context)

async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    message = """
üìÖ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

```
–î–∞—Ç–∞: –ì–ì–ì–ì-–ú–ú-–î–î
–í—Ä–µ–º—è: –ß–ß:–ú–ú
–¢–µ–∫—Å—Ç: –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
```

**–ü—Ä–∏–º–µ—Ä:**
```
–î–∞—Ç–∞: 2025-08-29
–í—Ä–µ–º—è: 14:30
–¢–µ–∫—Å—Ç: –í—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º
```

–Ø —Å–æ–∑–¥–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å –∏ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è!
    """
    await update.message.reply_text(message, parse_mode='Markdown')

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    user_reminders = {k: v for k, v in bot.reminders.items() if v['user_id'] == user_id}
    
    if not user_reminders:
        await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    message = "üìã **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n\n"
    
    for reminder_id, reminder in user_reminders.items():
        dt_str = reminder['datetime_str']
        text = reminder['text']
        message += f"üîπ **{dt_str}** - {text}\n"
        message += f"   ID: `{reminder_id[:8]}...`\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = []
    for reminder_id, reminder in list(user_reminders.items())[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        button_text = f"‚ùå {reminder['datetime_str'][:16]}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"delete_{reminder_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)

async def delete_reminder_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    reminder_id = query.data.replace("delete_", "")
    
    if reminder_id in bot.reminders:
        reminder = bot.reminders[reminder_id]
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            bot.scheduler.remove_job(f"{reminder_id}_1h")
            bot.scheduler.remove_job(f"{reminder_id}_30m")
        except:
            pass
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        del bot.reminders[reminder_id]
        bot.save_data()
        
        await query.edit_message_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {reminder['text']}")
    else:
        await query.edit_message_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def set_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timezone"""
    message = """
üåç **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`Timezone: Europe/Moscow`

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞:**
‚Ä¢ `Europe/Moscow` - –ú–æ—Å–∫–≤–∞
‚Ä¢ `Europe/Kiev` - –ö–∏–µ–≤
‚Ä¢ `Asia/Almaty` - –ê–ª–º–∞—Ç—ã
‚Ä¢ `Asia/Tashkent` - –¢–∞—à–∫–µ–Ω—Ç
‚Ä¢ `UTC` - –í—Å–µ–º–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è

–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{}`
    """.format(bot.user_timezones.get(update.effective_user.id, 'UTC'))
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        if text.startswith("Timezone:"):
            timezone_str = text.replace("Timezone:", "").strip()
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                pytz.timezone(timezone_str)
                bot.user_timezones[user_id] = timezone_str
                bot.save_data()
                await update.message.reply_text(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone_str}")
                return
            except:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞!")
                return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        lines = text.strip().split('\n')
        if len(lines) < 3:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞.")
            return
        
        date_str = None
        time_str = None
        reminder_text = None
        
        for line in lines:
            line = line.strip()
            if line.startswith("–î–∞—Ç–∞:"):
                date_str = line.replace("–î–∞—Ç–∞:", "").strip()
            elif line.startswith("–í—Ä–µ–º—è:"):
                time_str = line.replace("–í—Ä–µ–º—è:", "").strip()
            elif line.startswith("–¢–µ–∫—Å—Ç:"):
                reminder_text = line.replace("–¢–µ–∫—Å—Ç:", "").strip()
        
        if not all([date_str, time_str, reminder_text]):
            await update.message.reply_text("‚ùå –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            return
        
        # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
        user_tz = pytz.timezone(bot.user_timezones.get(user_id, 'UTC'))
        dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        dt = user_tz.localize(dt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if dt <= datetime.now(user_tz):
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        reminder_id = f"{user_id}_{int(dt.timestamp())}"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder_data = {
            'user_id': user_id,
            'chat_id': update.effective_chat.id,
            'datetime': dt.isoformat(),
            'datetime_str': dt.strftime("%Y-%m-%d %H:%M"),
            'text': reminder_text,
            'timezone': user_tz.zone
        }
        
        bot.reminders[reminder_id] = reminder_data
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await schedule_reminders(reminder_id, dt, reminder_text, update.effective_chat.id)
        
        bot.save_data()
        
        await update.message.reply_text(
            f"‚úÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
            f"üìÖ **–î–∞—Ç–∞:** {date_str}\n"
            f"‚è∞ **–í—Ä–µ–º—è:** {time_str}\n"
            f"üìù **–¢–µ–∫—Å—Ç:** {reminder_text}\n\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ 1 —á–∞—Å –∏ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è!",
            parse_mode='Markdown'
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏ –ß–ß:–ú–ú")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

async def schedule_reminders(reminder_id: str, target_datetime: datetime, text: str, chat_id: int):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 1 —á–∞—Å –∏ 30 –º–∏–Ω—É—Ç"""
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
    remind_1h = target_datetime - timedelta(hours=1)
    if remind_1h > datetime.now(target_datetime.tzinfo):
        bot.scheduler.add_job(
            send_reminder,
            DateTrigger(run_date=remind_1h),
            args=[chat_id, f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å!**\n\nüìù {text}"],
            id=f"{reminder_id}_1h"
        )
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç
    remind_30m = target_datetime - timedelta(minutes=30)
    if remind_30m > datetime.now(target_datetime.tzinfo):
        bot.scheduler.add_job(
            send_reminder,
            DateTrigger(run_date=remind_30m),
            args=[chat_id, f"üö® **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!**\n\nüìù {text}"],
            id=f"{reminder_id}_30m"
        )

async def send_reminder(chat_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        from telegram.ext._application import Application
        app = Application.builder().token(BOT_TOKEN).build()
        async with app:
            await app.bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def restore_scheduled_jobs():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    current_time = datetime.now(pytz.UTC)
    
    for reminder_id, reminder in list(bot.reminders.items()):
        try:
            target_dt = datetime.fromisoformat(reminder['datetime'])
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if target_dt <= current_time:
                del bot.reminders[reminder_id]
                continue
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await schedule_reminders(
                reminder_id, 
                target_dt, 
                reminder['text'], 
                reminder['chat_id']
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {reminder_id}: {e}")
    
    bot.save_data()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add", add_reminder))
    app.add_handler(CommandHandler("list", list_reminders))
    app.add_handler(CommandHandler("timezone", set_timezone))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(delete_reminder_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    bot.scheduler.start()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    async def startup():
        await restore_scheduled_jobs()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìù –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.create_task(startup())
    
    app.run_polling()

if __name__ == '__main__':
    main()
